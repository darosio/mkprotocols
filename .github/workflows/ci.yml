# CI Workflow
# This workflow runs linting, builds documentation, and deploys it to GitHub Pages.
name: CI

on:
  workflow_dispatch:
  pull_request:
    paths-ignore:
      - "*.md" # Only ignore Markdown files at the root if they are unrelated to documentation
      - "LICENSE.txt"
  push:
    paths-ignore:
      - "*.md" # Similar for push events
      - "LICENSE.txt"
    branches:
      - main
    tags:
      - "v*.*.*" # Triggers on version tags like v0.0.1

permissions:
  contents: write # Grants write access to repository contents

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  STABLE_PYTHON_VERSION: "3.12"
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"

jobs:
  pre-commit:
    name: Lint
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python-${{ env.STABLE_PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.STABLE_PYTHON_VERSION }}

      - name: Cache pip
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}|pip|${{ env.STABLE_PYTHON_VERSION }}|${{ hashFiles('**/constraints.txt', '**/pyproject.toml') }}
          enableCrossOsArchive: true

      - name: Install pip and hatch
        run: python -m pip install --constraint=.github/workflows/constraints.txt pip hatch

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit/
          key: pre-commit|${{ env.STABLE_PYTHON_VERSION }}|${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run lint
        run: hatch run lint

  build-deploy-release:
    runs-on: ubuntu-latest

    steps:
      - name: 1. Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensures full history is fetched for release-please and commitlint

      - name: 2. Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: 3. Install pip, hatch and pdm
        run: python -m pip install --constraint=.github/workflows/constraints.txt pip hatch pdm

      # # 5. Install Build Dependencies
      # - name: Install Build Dependencies
      #   run: pdm install --prod

      # 4. Create Hatch Environment and Install Dependencies
      - name: Create Hatch Environment
        run: hatch env create

      # 5. Build MkDocs Site Using Hatch
      - name: Build MkDocs Site
        run: hatch run build

      # 6. Generate PDFs and Zip Them
      - name: Generate and Zip PDFs
        run: |
          # Assuming mkdocs-pdf-export-plugin is configured to output PDFs to 'site/pdfs'
          mkdir -p site/pdfs

          # For demonstration, create dummy PDFs
          touch site/pdfs/sample.pdf

          # Create a ZIP archive of PDFs
          zip -j site/pdfs.zip site/pdfs/*.pdf

      # 7. List Files for Debugging
      - name: List Files in Site Directory
        run: ls -R site

      # 8. Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          folder: site # MkDocs default output directory

      # 9. Create GitHub Release with EPUB and PDFs ZIP
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: ncipollo/release-action@v1.9.0
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Release ${{ github.ref_name }}
          artifacts: |
            site/pdfs.zip
            # If you have EPUBs, add their paths here
            # site/epubs/*.epub

  # release:
  #   name: Release to GitHub
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Create Release
  #       uses: ncipollo/release-action@v1
  #       with:
  #       #   # bodyFile: "release.md"
  #         tag: v${{ needs.testpypi.outputs.version }}

  # docs_build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Set up Python ${{ env.STABLE_PYTHON_VERSION }}
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ env.STABLE_PYTHON_VERSION }}

  #     - name: Install binaries for docs
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y pandoc
  #         sudo apt-get install -y plantuml
  #         sudo apt-get install -y texlive-full

  #     - name: Cache pip
  #       id: cache-pip
  #       uses: actions/cache@v4
  #       with:
  #         path: ~/.cache/pip
  #         key: ${{ runner.os }}|pip|${{ env.STABLE_PYTHON_VERSION }}|-${{ hashFiles('**/constraints.txt', '**/pyproject.toml') }}
  #         enableCrossOsArchive: true

  #     - name: Install pip and hatch
  #       run: python -m pip install --constraint=.github/workflows/constraints.txt pip hatch

  #     - name: Run hatch
  #       run: hatch run docsall

  #     # - name: Upload documentation artifacts
  #     #   uses: actions/upload-artifact@v4
  #     #   with:
  #     #     name: documentation
  #     #     path: |
  #     #       docs/_build/html
  #     #       docs/_build/pdf
  #     #       docs/_build/epub

  #     - name: Upload artifact
  #       uses: actions/upload-pages-artifact@v3
  #       with:
  #         name: github-pages
  #         path: "./docs/_build"

  # docs_deploy:
  #   runs-on: ubuntu-latest
  #   if: ${{ github.ref == 'refs/heads/main' }}
  #   needs: [docs_build]
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
  #   permissions:
  #     contents: read
  #     pages: write
  #     id-token: write
  #   steps:
  #     - name: Download artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: github-pages

  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v4

  auto_merge_deps:
    name: Auto Merge dependencies labeled PRs
    needs: [pre-commit, build-deploy-release]
    # Run only on pull_request labeled dependencies (e.g. by dependabot) or
    # with the pre-commit ci commit message.
    if: >
      startsWith(github.event.pull_request.title, 'build(pre-commit): update hooks') ||
      contains(github.event.pull_request.labels.*.name, 'dependencies')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Merge PR
        uses: pascalgn/automerge-action@v0.16.4
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          MERGE_LABELS: ""
          MERGE_METHOD: squash
          DELETE_BRANCH_AFTER_MERGE: true
          LOG: "TRACE" # or DEBUG
